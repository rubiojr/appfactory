#!/usr/bin/env ruby
require 'rubygems'
require 'choice'
require 'fileutils'
require 'pp'

begin
  v = Gem::Version.create Gem::RubyGemsVersion
  req_version = Gem::Version.create('1.3.5')
  if !(v >= req_version)
    $stderr.puts "You need to have rubygems version >= 1.3.5 installed to use AppFactory"
  end
rescue Exception => e
  $stderr.puts "Can't detect rubygems version. Make sure you have rubygems >= 1.3.5"
end

Choice.options do
  banner 'Usage: appfactory <app_name>'
  header ''
  header 'Available options:'

  option :help do
    long '--help'
    short '-h'
    desc 'Show this message'
    action do 
      Choice.help
      exit
    end
  end
  option :dsl do
    long '--dsl=FILE'
    short '-d'
    desc 'DSL code to build the App'
    action do |f|
      if not File.exist?(f) or File.directory?(f)
        $stderr.puts "#{f} is not a valid DSL file"
        exit 1
      end
    end
  end

  option :appname do
    long '--appname=NAME'
    short '-n'
    desc 'Application Name'
  end

  option :bundle do
    long '--bundle *LIBS'
    desc 'Include the specified libraries'
  end
end

def check_required(*args)
  args.each do |arg|
    if !Choice.choices[arg.to_sym]
      $stderr.puts "\nOption --#{arg.to_s} is required\n\n"
      Choice.help
      exit 1
    end
  end
end

check_required :dsl, :appname

TMPLDIR="#{File.dirname(__FILE__)}/../template"
appname = Choice.choices[:appname]
appdir = appname.downcase
if File.exist?(appdir)
  $stderr.puts "Directory #{appdir} already exists"
  exit 1
end

CONTENTS_DIR = "#{appdir}/#{appname}.app/Contents"
RESOURCES_DIR = "#{CONTENTS_DIR}/Resources" 
appversion = '0.1'


puts "Creating application directory #{appdir}"
Dir.mkdir appdir

puts "Creating the Application Bundle..."
FileUtils.cp_r("#{TMPLDIR}/appfactory.app.template", "#{appdir}/#{appname}.app")

plist = IO.read("#{CONTENTS_DIR}/Info.plist")
File.open("#{CONTENTS_DIR}/Info.plist", 'w') do |f|
  plist.gsub! "@@CFBUNDLENAME@@", appname
  plist.gsub! "@@CFBUNDLEVERSION@@", appversion 
  f.puts plist
end

if Choice.choices[:bundle]
  Choice.choices[:bundle].each do |l|
    File.open("#{RESOURCES_DIR}/Gemfile",'w') do |f|
      f.puts "gem '#{l}'"
    end
    puts "Vendoring #{l} library..."
    `gem bundle --manifest #{RESOURCES_DIR}/Gemfile`
  end
end

puts "Adding the DSL file..."
File.open("#{RESOURCES_DIR}/dsl.rb", 'w') do |f|
  dsl = File.read(Choice.choices[:dsl])
  f.puts dsl
end

`open #{appdir}`
